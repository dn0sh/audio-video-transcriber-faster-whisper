# whisper_transcribe.py ‚Äî Script for batch audio/video transcription using faster-whisper
# Licensed under MIT License
# Copyright (c) 2025 Dmitrii Shamaraev  -> https://t.me/turmerig -> Telegram @turmerig

"""
‚ú® –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é faster-whisper

üìå –û–ø–∏—Å–∞–Ω–∏–µ:
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: .mp4, .avi, .mov, .mkv, .wav, .mp3, .ogg, .flac

üîπ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Whisper –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π RAM
- –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤ (hotwords)
- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
- –ü–æ–¥—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
- –†–∞—Å—á—ë—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ _transcription.info —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
- –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (Windows)

üì¶ –¢—Ä–µ–±—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
pip install faster-whisper moviepy winotify psutil

üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏:
- *.txt ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
- *.mp4 / *.wav –∏ –¥—Ä. ‚Äî –∫–æ–ø–∏–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
- _transcription.info ‚Äî –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º

‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:
- python whisper_transcribe.py                  ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ `_input`
- python whisper_transcribe.py my_media         ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ `my_media`
- python whisper_transcribe.py my_media --model small ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å `small`

üïí –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏:
‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 245.67 —Å–µ–∫ (04:05)
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: 6.5x ‚Üí —Ñ–∞–π–ª –¥–ª–∏–Ω–æ–π 60 —Å–µ–∫—É–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ~9 —Å–µ–∫—É–Ω–¥

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–ù–∞ Windows –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω winotify)

üìä –û—Ç—á—ë—Ç:
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª `_transcription.info`:
- –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ (–ø—É—Ç—å, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ä–∞–∑–º–µ—Ä, –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Å–∫–æ—Ä–æ—Å—Ç—å)
- –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (RAM, CUDA, –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫)
- –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏ —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
"""
# TODO v24
SCRIPT_VERSION = 'v24'

import argparse
import datetime
import os
import psutil
import shutil
import time
from faster_whisper import WhisperModel
from moviepy.video.io.VideoFileClip import VideoFileClip
from moviepy.audio.io.AudioFileClip import AudioFileClip


def get_available_ram():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å –≤ –ì–ë
    """
    return psutil.virtual_memory().available / (1024 ** 3)


def has_cuda():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ CUDA (—Ç—Ä–µ–±—É–µ—Ç—Å—è torch)
    """
    try:
        import torch
        return torch.cuda.is_available()
    except ImportError:
        return False


def suggest_model(ram_gb, use_cuda):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤
    """
    if use_cuda:
        return "large"
    elif ram_gb >= 6:
        return "small"
    elif ram_gb >= 4:
        return "base"
    else:
        return "tiny"


def extract_audio_from_video(video_path, audio_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ –≤–∏–¥–µ–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ WAV
    """
    video = VideoFileClip(video_path)
    video.audio.write_audiofile(audio_path, codec='pcm_s16le')
    return audio_path


def is_supported_file(filename):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–æ–º
    """
    supported_extensions = [".mp4", ".avi", ".mov", ".mkv", ".wav", ".mp3", ".ogg", ".flac"]
    return os.path.isfile(filename) and os.path.splitext(filename)[1].lower() in supported_extensions


def get_media_duration(file_path):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM:SS
    """
    try:
        ext = os.path.splitext(file_path)[1].lower()
        if ext in (".mp4", ".avi", ".mov", ".mkv"):
            clip = VideoFileClip(file_path)
        elif ext in (".wav", ".mp3", ".ogg", ".flac"):
            clip = AudioFileClip(file_path)
        else:
            return "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        total_seconds = int(clip.duration)
        minutes, seconds = divmod(total_seconds, 60)
        return f"{minutes:02d}:{seconds:02d}"
    except Exception as e:
        print(f"‚ùå [WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ '{file_path}': {e}")
        return "–æ—à–∏–±–∫–∞"


def read_hotwords(file_path='hotwords.txt'):
    """
    –ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ hotwords –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = [line.strip() for line in f if line.strip()]
            return ', '.join(lines) if lines else None
    except FileNotFoundError:
        print(f"[WARNING] –§–∞–π–ª hotwords.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return ''


def duration_to_seconds(duration_str):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'MM:SS' –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    """
    try:
        minutes, seconds = map(int, duration_str.split(":"))
        return minutes * 60 + seconds
    except Exception:
        return 0  # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å


def format_seconds(seconds):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM:SS –∏–ª–∏ MM:SS
    """
    total_seconds = int(seconds)
    hours, remainder = divmod(total_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    if hours > 0:
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    else:
        return f"{minutes:02d}:{seconds:02d}"


def transcribe_file(hotwords, media_path, output_folder, model_size="base"):
    """
    –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é + –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    media_path - –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    output_folder - –ø–∞–ø–∫–∞, –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
    model_size - —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ Whisper
    """
    start_time = time.time()  # –ù–∞—á–∞–ª–æ –æ—Ç—Å—á—ë—Ç–∞
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    ext = os.path.splitext(media_path)[1].lower()
    # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
    if ext in (".mp4", ".avi", ".mov", ".mkv"):
        print("[INFO] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
        file_root = os.path.splitext(os.path.basename(media_path))[0]
        audio_path = os.path.join(output_folder, f"{file_root}_temp_audio.wav")
        audio_path = extract_audio_from_video(media_path, audio_path)
    # –ï—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
    elif ext in (".wav", ".mp3", ".ogg", ".flac"):
        audio_path = media_path
    # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {media_path}")
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper
    print(f"[INFO] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper ({model_size})...")
    model = WhisperModel(model_size, device="cuda" if has_cuda() else "cpu")
    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
    print("[INFO] –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É...")
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –∏ –¥—Ä.
    # segments, info = model.transcribe(audio_path, beam_size=5)
    # segments, info = model.transcribe(audio_path, beam_size=5, language="ru")
    segments, info = model.transcribe(
        audio_path,
        language="ru",
        log_progress=True,
        hotwords=hotwords,
    )
    print(f"[INFO] –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —è–∑—ã–∫: {info.language}")
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    transcription = " ".join(segment.text.strip() for segment in segments).strip()
    # TODO –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
    # if "_temp_audio.wav" in audio_path and os.path.exists(audio_path):
    #     os.remove(audio_path)
    end_time = time.time()
    elapsed_time = round(end_time - start_time, 2)
    return transcription, elapsed_time  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∏ –≤—Ä–µ–º—è


def get_system_info():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    import sys
    import platform
    return {
        "os": platform.platform(),
        "python_version": sys.version.split("|")[0].strip(),
        "cuda_available": has_cuda(),
        "ram_available_gb": round(get_available_ram(), 2),
    }


def get_library_versions():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    """
    from importlib.metadata import version
    libraries = {
        "faster-whisper": None,
        "whisper": None,
        "torch": None,
        "moviepy": None,
        "winotify": None,
        "argparse": None,
        "psutil": None,
    }
    for lib in libraries:
        try:
            libraries[lib] = version(lib)
        except ImportError:
            libraries[lib] = "not installed"
        except Exception:
            libraries[lib] = "unknown"
    return libraries


def write_info_file(hotwords, output_folder, processed_info, failed_info, model_size, total_time_sec):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    """
    info_path = os.path.join(output_folder, "_transcription.info")
    system_info = get_system_info()
    library_versions = get_library_versions()
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    transcribe_params = {
        "engine": "faster-whisper",
        "engine_version": library_versions.get("faster-whisper", "unknown"),
        "model_size": model_size,
        "language": "ru",
        "log_progress": True,
        "hotwords": hotwords,
    }
    with open(info_path, "w", encoding="utf-8") as f:
        f.write("=== üßæ –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ ==========\n")
        f.write(f"{SCRIPT_VERSION}\n\n")
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ø–µ—à–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        f.write("=== üìÅ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ==========\n")
        for info in processed_info:
            f.write(f"üìå –§–∞–π–ª: {info['name']}\n")
            f.write(f"–ü—É—Ç—å: {info['path']}\n")
            f.write(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {info['size_mb']} MB\n")
            f.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info['duration']}\n")
            f.write(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {info['elapsed_time_sec']:.2f} —Å–µ–∫ ({info['elapsed_time_str']})\n")
            f.write(f"–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {info['speed_x']:.2f}x\n")
            f.write("-" * 50 + "\n")
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if failed_info:
            f.write("=== ‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ ==========\n")
            for info in failed_info:
                f.write(f"üìå –§–∞–π–ª: {info['name']}\n")
                f.write(f"–ü—É—Ç—å: {info['path']}\n")
                f.write(f"–û—à–∏–±–∫–∞: {info['reason']}\n")
                f.write("-" * 50 + "\n")
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        f.write("\n\n=== ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ ==========\n")
        f.write(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: {transcribe_params.get('engine', '')} (v{transcribe_params.get('engine_version', '')})\n")
        f.write(f"–ú–æ–¥–µ–ª—å: {transcribe_params.get('model_size', '')}\n")
        for key, value in transcribe_params.items():
            if key not in ("model_size", "engine", "engine_version"):
                f.write(f"{key}: {value}\n")
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        f.write("\n\n=== üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ==========\n")
        for key, value in system_info.items():
            f.write(f"{key}: {value}\n")
        # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –∏—Ö –≤–µ—Ä—Å–∏–∏
        f.write("\n\n=== üß† –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –∏—Ö –≤–µ—Ä—Å–∏–∏ ==========\n")
        for lib, ver in library_versions.items():
            f.write(f"{lib}: {ver}\n")
        # –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        f.write("\n\n=== üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ==========\n")
        if processed_info:
            total_media_duration = sum(f['media_duration_sec'] for f in processed_info)
            total_elapsed_time = sum(f['elapsed_time_sec'] for f in processed_info)
            average_speed = total_media_duration / total_elapsed_time if total_elapsed_time > 0 else 0
            f.write(f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞: {format_seconds(total_media_duration)}\n")
            f.write(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_elapsed_time:.2f} —Å–µ–∫ ({format_seconds(total_elapsed_time)})\n")
            f.write(f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {average_speed:.2f}x\n\n")
        else:
            f.write("–§–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0\n")
        f.write("=== ‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ ==========\n")
        f.write("–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–¥–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ–∞–π–ª –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n")
        f.write("–ü—Ä–∏–º–µ—Ä: 6.5x ‚Äî —Ñ–∞–π–ª –¥–ª–∏–Ω–æ–π 60 —Å–µ–∫—É–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ~9 —Å–µ–∫—É–Ω–¥.\n")
        f.write("–ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–¥–µ–ª—å.\n")
        f.write(f"\n–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞: {total_time_sec:.2f} —Å–µ–∫ ({format_seconds(total_time_sec)})\n")
    print(f"\n[INFO] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {info_path}\n")


def show_notification(title, message='', duration=4):
    """
    –í—ã–≤–æ–¥–∏—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Windows
    –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ winotify –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    """
    try:
        from winotify import Notification
        toast = Notification(
            app_id="Transcriber",
            title=title,
            msg=message,
            duration="short"
        )
        toast.show()
    except ImportError:
        print(f"[NOTIFY] {title}: {message}")


if __name__ == "__main__":
    start_total_time = time.time()
    print("\n–ü–∞–∫–µ—Ç–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Whisper")
    print(f"\nüßæ –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {SCRIPT_VERSION}\n")
    parser = argparse.ArgumentParser(description="–ü–∞–∫–µ—Ç–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Whisper")
    parser.add_argument("input_folder", type=str, nargs="?", default="_input",
                        help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '_input')")
    parser.add_argument("--model", type=str, default=None,
                        choices=["tiny", "base", "small", "medium", "large",
                                 "tiny.en", "base.en", "small.en", "medium.en"],
                        help="–ú–æ–¥–µ–ª—å Whisper: tiny, base, small, medium, large (–∏–ª–∏ .en –¥–ª—è –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã—Ö). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    args = parser.parse_args()
    input_folder = args.input_folder
    # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–æ–∑–¥–∞—ë–º –µ—ë
    if not os.path.exists(input_folder):
        print(f"[INFO] –ü–∞–ø–∫–∞ '{input_folder}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é...")
        os.makedirs(input_folder)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∞
    if not os.path.isdir(input_folder):
        raise NotADirectoryError(f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {input_folder}")
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    files_to_process = [
        os.path.join(input_folder, f) for f in os.listdir(input_folder)
        if is_supported_file(os.path.join(input_folder, f))
    ]
    if not files_to_process:
        print("‚ùå [WARNING] –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏")
        exit()
    print(f"[INFO] –ù–∞–π–¥–µ–Ω–æ {len(files_to_process)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏ CUDA
    ram_available = get_available_ram()
    cuda_available = has_cuda()
    chosen_model = args.model if args.model else suggest_model(ram_available, cuda_available)
    print(f"[INFO] –î–æ—Å—Ç—É–ø–Ω–∞—è RAM: {ram_available:.2f} –ì–ë")
    print(f"[INFO] –î–æ—Å—Ç—É–ø–Ω–∞ CUDA: {'–î–∞' if cuda_available else '–ù–µ—Ç'}")
    print(f"[INFO] –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {chosen_model}")
    # –°–æ–∑–¥–∞—ë–º –∏–º—è –ø–∞–ø–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ + –º–æ–¥–µ–ª—å
    current_time = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    folder_name = f"{current_time}_{chosen_model}"
    output_folder = os.path.join(os.getcwd(), folder_name)
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(output_folder, exist_ok=True)
    # –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
    processed_files_info = []
    failed_info = []
    total_files = len(files_to_process)
    hotwords = read_hotwords()
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for idx, media_file in enumerate(files_to_process, start=1):
        file_name = os.path.basename(media_file)
        file_root, _ = os.path.splitext(file_name)
        duration = get_media_duration(media_file)
        print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {idx} –∏–∑ {total_files}: {file_name} | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
        # –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –≤ –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
        try:
            shutil.copy(media_file, os.path.join(output_folder, file_name))
            print(f"üìé –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª '{file_name}' –≤ –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É: {str(e)}")
        if duration == "–æ—à–∏–±–∫–∞":
            print(f"‚ùå [ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ '{file_name}'. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω")
            failed_info.append({
                'name': file_name,
                'path': media_file,
                'reason': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
            })
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–∫–æ–π —Ñ–∞–π–ª
        try:
            transcription, elapsed_time = transcribe_file(hotwords, media_file, output_folder, model_size=chosen_model)
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_file = os.path.join(output_folder, f"{file_root}.txt")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
            with open(output_file, "w", encoding="utf-8") as f:
                f.write(transcription)
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            elapsed_minutes = elapsed_time // 60
            elapsed_seconds = elapsed_time % 60
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_file}")
            print(f"‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {elapsed_time:.2f} —Å–µ–∫ ({format_seconds(elapsed_time)})")
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ MM:SS –≤ —Å–µ–∫—É–Ω–¥—ã
            media_duration_sec = duration_to_seconds(duration)
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
            try:
                speed = media_duration_sec / elapsed_time
            except ZeroDivisionError:
                speed = 0
            print(f"‚è± –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {speed:.2f}x")
            processed_files_info.append({
                'name': file_name,
                'path': media_file,
                'duration': duration,
                'media_duration_sec': media_duration_sec,
                'size_mb': round(os.path.getsize(media_file) / (1024 ** 2), 2),
                'elapsed_time_sec': elapsed_time,
                'elapsed_time_str': format_seconds(elapsed_time),
                'speed_x': round(speed, 2)
            })
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª '{file_name}': {str(e)}")
            failed_info.append({
                'name': file_name,
                'path': media_file,
                'reason': str(e)
            })
    # –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    end_total_time = time.time()
    total_elapsed_time_sec = end_total_time - start_total_time
    total_elapsed_time_str = format_seconds(total_elapsed_time_sec)
    print("\n‚úÖüéâ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã\n")
    print(f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞: {total_elapsed_time_sec:.2f} —Å–µ–∫ ({total_elapsed_time_str})")
    if len(failed_info) > 0:
        error_failed_info = '\n‚ùå'
    else:
        error_failed_info = ', '
    print(f"\n‚úÖ üìä –£—Å–ø–µ—à–Ω–æ: {len(processed_files_info)}{error_failed_info}–û—à–∏–±–æ–∫: {len(failed_info)}")
    if processed_files_info:
        total_media_duration = sum(f['media_duration_sec'] for f in processed_files_info)
        total_elapsed_time = sum(f['elapsed_time_sec'] for f in processed_files_info)
        average_speed = total_media_duration / total_elapsed_time if total_elapsed_time > 0 else 0
        print(f"üìä –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞: {format_seconds(total_media_duration)}")
        print(f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_elapsed_time:.2f} —Å–µ–∫ ({format_seconds(total_elapsed_time)})")
        print(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {average_speed:.2f}x")
        print("‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏–µ:")
        print("   - 1.0 ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")
        print("   - >1.0 ‚Äî –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:")
        print("     6.5x ‚Üí —Ñ–∞–π–ª –¥–ª–∏–Ω–æ–π 60 —Å–µ–∫—É–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ~9 —Å–µ–∫—É–Ω–¥.")
        print("   - <1.0 ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (—á–∞—â–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º VAD/—à—É–º–∞—Ö).")
    if failed_info:
        print("\n‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
        for f in failed_info:
            print(f"- {f['name']} ‚Äî {f['reason']}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
    write_info_file(hotwords, output_folder, processed_files_info, failed_info, chosen_model, total_elapsed_time_sec)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    show_notification("\n‚úÖ –ì–æ—Ç–æ–≤–æ!", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_files_info)} —Ñ–∞–π–ª–æ–≤. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ:\n{output_folder}")
